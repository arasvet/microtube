services:
  db:
    image: postgres:16-alpine
    container_name: microtube-db
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: microtube
    ports:
      - "5432:5432"
    volumes:
      - dbdata:/var/lib/postgresql/data
      - ./migrations/init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-app} -d ${POSTGRES_DB:-microtube}",
        ]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    container_name: microtube-redis
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10

  seed:
    build:
      context: .
      dockerfile: Dockerfile.seed
    container_name: microtube-seed
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: microtube
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      VIDEOS: 1200
      EVENTS: 50000
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  api:
    build: .
    container_name: microtube-api
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: microtube
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      API_HTTP_PORT: 8080
      JWT_SECRET: devsecret
      AUTH_TTL: 30m
      ADMINS: b02eaed8-cd5b-4ae1-9fd8-448a5ec3058f
    depends_on:
      seed:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped

volumes:
  dbdata:
  redisdata:
